{
  "name": "vscode-psl",
  "displayName": "vscode-psl",
  "description": "Profile Scripting Language support",
  "version": "1.9.0",
  "preview": true,
  "publisher": "ing-bank",
  "engines": {
    "vscode": "^1.23.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "license": "MIT",
  "activationEvents": [
    "workspaceContains:dataqwik",
    "workspaceContains:.vscode/environment.json",
    "onLanguage:psl",
    "onCommand:psl.getElement",
    "onCommand:psl.refreshElement",
    "onCommand:psl.getTable",
    "onCommand:psl.testCompile",
    "onCommand:psl.configureEnvironment",
    "onCommand:psl.sendElement",
    "onCommand:psl.compileAndLink",
    "onCommand:psl.runPSL",
    "onCommand:psl.launchHostTerminal"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "languages": [
      {
        "id": "profileTable",
        "aliases": [
          "Profile Table Definition"
        ],
        "extensions": [
          ".TBL"
        ],
        "configuration": "./def-language-configuration.json"
      },
      {
        "id": "profileColumn",
        "aliases": [
          "Profile Column Definition"
        ],
        "extensions": [
          ".COL"
        ],
        "configuration": "./languages/def-language-configuration.json"
      },
      {
        "id": "profileData",
        "aliases": [
          "Profile Data Item"
        ],
        "extensions": [
          ".DAT"
        ]
      },
      {
        "id": "psl",
        "aliases": [
          "Profile Scripting Language",
          "psl"
        ],
        "extensions": [
          ".PROC",
          ".PSL",
          ".psl"
        ],
        "configuration": "./languages/psl-language-configuration.json"
      },
      {
        "id": "profileBatch",
        "aliases": [
          "Profile Batch Definition"
        ],
        "extensions": [
          ".BATCH"
        ],
        "configuration": "./languages/psl-language-configuration.json"
      },
      {
        "id": "profileTrigger",
        "aliases": [
          "Profile Trigger Definition"
        ],
        "extensions": [
          ".TRIG"
        ],
        "configuration": "./languages/psl-language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "psl",
        "scopeName": "source.psl",
        "path": "./syntaxes/psl.tmLanguage.json"
      },
      {
        "language": "profileBatch",
        "scopeName": "source.psl",
        "path": "./syntaxes/psl.tmLanguage.json"
      },
      {
        "language": "profileTrigger",
        "scopeName": "source.psl",
        "path": "./syntaxes/psl.tmLanguage.json"
      },
      {
        "language": "profileTable",
        "scopeName": "source.json",
        "path": "./syntaxes/JSON.tmLanguage"
      },
      {
        "language": "profileColumn",
        "scopeName": "source.json",
        "path": "./syntaxes/JSON.tmLanguage"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "environment.json",
        "url": "./schemas/environmentSchema.json"
      },
      {
        "fileMatch": "environments.json",
        "url": "./schemas/environmentsSchema.json"
      }
    ],
    "snippets": [
      {
        "language": "psl",
        "path": "./snippets/psl.json"
      },
      {
        "language": "profileTable",
        "path": "./snippets/tableDefinition.json"
      },
      {
        "language": "profileColumn",
        "path": "./snippets/columnDefinition.json"
      }
    ],
    "configurationDefaults": {
      "[psl]": {
        "editor.snippetSuggestions": "bottom",
        "editor.insertSpaces": false,
        "editor.wordSeparators": "`~!@^&*()-=+[{]}\\|;:'\",.<>/?_$"
      },
      "[profileBatch]": {
        "editor.snippetSuggestions": "bottom",
        "editor.insertSpaces": false,
        "editor.wordSeparators": "`~!@^&*()-=+[{]}\\|;:'\",.<>/?_$"
      },
      "[profileTrigger]": {
        "editor.snippetSuggestions": "bottom",
        "editor.insertSpaces": false,
        "editor.wordSeparators": "`~!@^&*()-=+[{]}\\|;:'\",.<>/?_$"
      },
      "[profileColumn]": {
        "editor.insertSpaces": false
      },
      "[profileData]": {
        "editor.insertSpaces": false,
        "editor.renderWhitespace": "boundary",
        "diffEditor.ignoreTrimWhitespace": false
      },
      "[profileTable]": {
        "editor.insertSpaces": false
      }
    },
    "commands": [
      {
        "command": "psl.setGtmDebug",
        "title": "Set GT.M Debug",
        "category": "PSL"
      },
      {
        "command": "psl.stepOut",
        "title": "Terminal Step Out",
        "category": "PSL"
      },
      {
        "command": "psl.stepIn",
        "title": "Terminal Step In",
        "category": "PSL"
      },
      {
        "command": "psl.stepOver",
        "title": "Terminal Step Over",
        "category": "PSL"
      },
      {
        "command": "psl.getElement",
        "title": "Get Element from Host",
        "category": "PSL"
      },
      {
        "command": "psl.refreshElement",
        "title": "Refresh from Host",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/sync.svg",
          "light": "icons/light/sync.svg"
        }
      },
      {
        "command": "psl.getTable",
        "title": "Table Get from Host",
        "category": "PSL"
      },
      {
        "command": "psl.testCompile",
        "title": "Test Compile",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/gear.svg",
          "light": "icons/light/gear.svg"
        }
      },
      {
        "command": "psl.configureEnvironment",
        "title": "Configure Environment",
        "category": "PSL"
      },
      {
        "command": "psl.sendElement",
        "title": "Send to Host",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/arrow-up.svg",
          "light": "icons/light/arrow-up.svg"
        }
      },
      {
        "command": "psl.compileAndLink",
        "title": "Compile and Link",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/link.svg",
          "light": "icons/light/link.svg"
        }
      },
      {
        "command": "psl.runPSL",
        "title": "Run PSL",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/triangle-right.svg",
          "light": "icons/light/triangle-right.svg"
        }
      },
      {
        "command": "psl.runTest",
        "title": "Run Test",
        "category": "PSL"
      },
      {
        "command": "psl.runCoverage",
        "title": "Run Test (with Coverage)",
        "category": "PSL"
      },
      {
        "command": "psl.sendTable",
        "title": "Table Send to Host",
        "category": "PSL"
      },
      {
        "command": "psl.refreshTable",
        "title": "Table Refresh from Host",
        "category": "PSL"
      },
      {
        "command": "psl.previewDocumentation",
        "title": "Preview Documentation",
        "category": "PSL"
      },
      {
        "command": "psl.dbaView",
        "title": "DBA View",
        "category": "PSL",
        "icon": {
          "dark": "icons/dark/triangle-right.svg",
          "light": "icons/light/triangle-right.svg"
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.getElement",
          "group": "PSL.3"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.getTable",
          "group": "PSL.3"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.testCompile",
          "group": "PSL.2"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.runPSL",
          "group": "PSL.2"
        },
        {
          "when": "explorerResourceIsFolder",
          "command": "psl.compileAndLink",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileData && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileColumn && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileBatch && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTrigger && !explorerResourceIsFolder",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileData && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileColumn && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileBatch && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTrigger && !explorerResourceIsFolder",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl && !explorerResourceIsFolder",
          "command": "psl.runPSL",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl && !explorerResourceIsFolder",
          "command": "psl.compileAndLink",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable && !explorerResourceIsFolder",
          "command": "psl.compileAndLink",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl && !explorerResourceIsFolder",
          "command": "psl.testCompile",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable && !explorerResourceIsFolder",
          "command": "psl.sendTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileColumn && !explorerResourceIsFolder",
          "command": "psl.sendTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileTable && !explorerResourceIsFolder",
          "command": "psl.refreshTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileColumn && !explorerResourceIsFolder",
          "command": "psl.refreshTable",
          "group": "PSL.1"
        },
        {
          "command": "psl.configureEnvironment",
          "group": "PSL.4"
        }
      ],
      "editor/context": [
        {
          "when": "resourceLangId == psl",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileData",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileBatch",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTrigger",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "psl.isProfileElement",
          "command": "psl.refreshElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileData",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileBatch",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTrigger",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "psl.isProfileElement",
          "command": "psl.sendElement",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileData",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileBatch",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileTrigger",
          "command": "psl.getElement",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileData",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileBatch",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == profileTrigger",
          "command": "psl.getTable",
          "group": "PSL.4"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.testCompile",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.runPSL",
          "group": "PSL.2"
        },
        {
          "when": "resourceFilename =~ /^(Utc|Stc)/ && resourceLangId == psl && psl.runTestContext",
          "command": "psl.runTest",
          "group": "PSL.3"
        },
        {
          "when": "resourceFilename =~ /^(Utc|Stc)/ && resourceLangId == psl && psl.runCoverageContext",
          "command": "psl.runCoverage",
          "group": "PSL.3"
        },
        {
          "when": "resourceLangId == psl",
          "command": "psl.compileAndLink",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.compileAndLink",
          "group": "PSL.2"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.sendTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.sendTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.refreshTable",
          "group": "PSL.1"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.refreshTable",
          "group": "PSL.1"
        }
      ],
      "editor/title": [
        {
          "command": "psl.dbaView",
          "group": "navigation@-207"
        },
        {
          "command": "psl.previewDocumentation",
          "group": "navigation@-206",
          "when": "resourceLangId == psl && psl.hasDocumentationServer"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == profileData"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == profileBatch"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == profileTrigger"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == psl"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "psl.isProfileElement"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == profileTable"
        },
        {
          "command": "psl.refreshElement",
          "group": "navigation@-205",
          "when": "resourceLangId == profileColumn"
        },
        {
          "command": "psl.testCompile",
          "group": "navigation@-204",
          "when": "resourceLangId == psl"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == profileBatch"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == profileTrigger"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == profileData"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == psl"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "psl.isProfileElement"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == profileTable"
        },
        {
          "command": "psl.sendElement",
          "group": "navigation@-203",
          "when": "resourceLangId == profileColumn"
        },
        {
          "command": "psl.compileAndLink",
          "group": "navigation@-202",
          "when": "resourceLangId == psl"
        },
        {
          "command": "psl.compileAndLink",
          "group": "navigation@-202",
          "when": "resourceLangId == profileTable"
        },
        {
          "command": "psl.runPSL",
          "group": "navigation@-201",
          "when": "resourceLangId == psl"
        }
      ],
      "commandPalette": [
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.sendTable",
          "group": "PSL"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.sendTable",
          "group": "PSL"
        },
        {
          "when": "resourceLangId == profileTable",
          "command": "psl.refreshTable",
          "group": "PSL"
        },
        {
          "when": "resourceLangId == psl && psl.hasDocumentationServer",
          "command": "psl.previewDocumentation",
          "group": "PSL"
        },
        {
          "when": "resourceLangId == profileColumn",
          "command": "psl.refreshTable",
          "group": "PSL"
        }
      ]
    },
    "keybindings": [
      {
        "when": "resourceLangId == psl",
        "command": "psl.testCompile",
        "key": "Ctrl+Shift+B"
      },
      {
        "key": "Ctrl+E",
        "command": "psl.stepOut",
        "when": "terminalFocus && psl.gtmDebug"
      },
      {
        "key": "Ctrl+Q",
        "command": "psl.stepIn",
        "when": "terminalFocus && psl.gtmDebug"
      },
      {
        "key": "Ctrl+W",
        "command": "psl.stepOver",
        "when": "terminalFocus && psl.gtmDebug"
      },
      {
        "command": "psl.launchHostTerminal",
        "key": "win+oem_3"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "PSL Configuration",
      "properties": {
        "psl.lint": {
          "scope": "resource",
          "type": "string",
          "default": "config",
          "enum": [
            "config",
            "all",
            "none"
          ],
          "description": "Whether to lint files written in PSL."
        },
        "psl.previewFeatures": {
          "scope": "resource",
          "type": "boolean",
          "default": false,
          "description": "Set true to enable the latest developing features."
        },
        "psl.gtmDebugEnabled": {
          "scope": "machine",
          "type": "boolean",
          "default": false,
          "description": "Set true to keep GT.M Debug on by default."
        },
        "psl.customTasks": {
          "scope": "resource",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "command",
              "mrpcID",
              "request"
            ],
            "properties": {
              "command": {
                "type": "string",
                "enum": [
                  "runTest",
                  "runCoverage"
                ],
                "enumDescriptions": [
                  "A command for running tests via PslUtTestCase.",
                  "A command for running tests with coverage output."
                ]
              },
              "mrpcID": {
                "type": "string",
                "description": "The MRPC ID supplied in the client message. For example \"121\" or \"^ZMRPC121\"."
              },
              "request": {
                "type": "string",
                "description": "The request type. For example \"PSLRUNTEST\"."
              }
            }
          }
        },
        "psl.documentationServer": {
          "scope": "resource",
          "type": "string",
          "description": "HTTP POST endpoint that responds with PSL documentation in markdown format."
        },
        "psl.trailingNewline": {
          "scope": "resource",
          "type": "string",
          "enum": [
            "default",
            "always",
            "never"
          ],
          "enumDescriptions": [
            "Allows the default behavior, makes no modification.",
            "Always add a trailing newline if not present.",
            "Remove trailing newlines if they are present."
          ],
          "default": "default",
          "description": "Adds a trailing newline after a \"Get\" or \"Refresh\"."
        }
      }
    }
  },
  "scripts": {
    "compile": "tsc -p ./",
    "compile-lint": "tsc -p ./src/pslLint/cli",
    "compile-parser": "tsc -p ./src/parser",
    "lint": "tslint -c tslint.json --project .",
    "watch": "npm run compile -- -watch",
    "test": "jest"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ing-bank/vscode-psl"
  },
  "devDependencies": {
    "@types/fs-extra": "^5.0.4",
    "@types/jest": "^23.3.8",
    "@types/minimatch": "^3.0.3",
    "@types/node": "^9.6.35",
    "jest": "^24.7.1",
    "ts-jest": "^23.10.4",
    "tslint": "^5.11.0",
    "typescript": "^3.4.5",
    "vscode": "^1.1.33"
  },
  "dependencies": {
    "fs-extra": "^5.0.0",
    "jsonc-parser": "^1.0.0",
    "minimatch": "^3.0.4",
    "request-light": "^0.2.4",
    "vscode-json-languageservice": "^3.2.0"
  },
  "jest": {
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testRegex": ".*?/__tests__/.*-test(\\.ts|\\.js)",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "json",
      "jsx"
    ]
  }
}
